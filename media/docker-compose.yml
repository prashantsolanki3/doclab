version: "3.7"
services:
  plex:
    image: ghcr.io/linuxserver/plex
    container_name: plex
    # runtime: nvidia
    environment:
      - DOCKER_MODS=ghcr.io/pabloromeo/clusterplex_dockermod:latest
      - ORCHESTRATOR_URL=http://plex-orchestrator:3500
      - PMS_SERVICE=plex # This service. If you disable Local Relay then you must use PMS_IP instead
      - PMS_PORT=32400
      - TRANSCODE_OPERATING_MODE=remote #(local|remote|both)
      - TRANSCODER_VERBOSE=1 # 1=verbose, 0=silent
      - LOCAL_RELAY_ENABLED=1
      - LOCAL_RELAY_PORT=32499
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - VERSION=${PLEX_VERSION}
      - PLEX_CLAIM=${PLEX_CLAIM}
      - NVIDIA_DRIVER_CAPABILITIES=compute,video,utility
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_DRIVER_CAPABILITIES=compute,video,utility
    # healthcheck:
    #   test: curl -fsS http://localhost:32400/identity > /dev/null || exit 1
    #   interval: 15s
    #   timeout: 15s
    #   retries: 5
    #   start_period: 30s
    volumes:
      - ${VOL_CONFIG}/plex:/config
      - media:/media
    ports:
      - 32499:32499 # LOCAL_RELAY_PORT
      - 32469:32469
      - 32400:32400
      - 32401:32401
      - 3005:3005
      - 8324:8324
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    restart: ${RESTART_POLICY}
    networks:
      - intranet
    labels:
      - swag=enable
      - swag_port=32400
      # deploy:
      #   placement:
      #     constraints: [ node.hostname == docker-manager-1 ]
      # resources:
      #   reservations:
      #     generic_resources:
      #       - discrete_resource_spec:
      #           kind: 'NVIDIA-GPU'
      #           value: 2
      # devices:
      #   - driver: nvidia
      #     device_ids: [ '0' ]
      #     capabilities: [ gpu ]
  plex-orchestrator:
    image: ghcr.io/pabloromeo/clusterplex_orchestrator:latest
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        order: start-first
    # healthcheck:
    #   test: curl -fsS http://localhost:3500/health > /dev/null || exit 1
    #   interval: 15s
    #   timeout: 15s
    #   retries: 5
    #   start_period: 30s
    environment:
      TZ: ${TZ}
      LISTENING_PORT: 3500
      WORKER_SELECTION_STRATEGY: "LOAD_RANK" # RR | LOAD_CPU | LOAD_TASKS | LOAD_RANK (default)
    volumes:
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 3500:3500
    networks:
      - intranet
  # Uncomment the plex-worker for CPU transcoding or use ./plex-worker-gpu.sh
  # plex-worker:
  #   image: ghcr.io/linuxserver/plex:latest
  #   hostname: "plex-worker-{{.Node.Hostname}}"
  #   deploy:
  #     mode: replicated
  #     replicas: 2
  #   environment:
  #     DOCKER_MODS: "ghcr.io/pabloromeo/clusterplex_worker_dockermod:latest"
  #     VERSION: docker
  #     PUID: 1000
  #     PGID: 1000
  #     TZ: ${TZ}
  #     LISTENING_PORT: 3501 # used by the healthcheck
  #     STAT_CPU_INTERVAL: 2000 # interval for reporting worker load metrics
  #     ORCHESTRATOR_URL: http://plex-orchestrator:3500
  #     EAE_SUPPORT: "1"
  #   healthcheck:
  #     test: curl -fsS http://localhost:3501/health > /dev/null || exit 1
  #     interval: 15s
  #     timeout: 15s
  #     retries: 5
  #     start_period: 240s
  #   volumes:
  #     - ${VOL_CONFIG}/plex/codecs:/codecs
  #     - media:/media
  #   networks:
  #     - intranet
  # plex:
  #   image: ghcr.io/linuxserver/plex
  #   container_name: plex
  #   # runtime: nvidia
  #   # generic-resource: "gpu=1"
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     - VERSION=${PLEX_VERSION}
  #     - PLEX_CLAIM=${PLEX_CLAIM}
  #     - NVIDIA_DRIVER_CAPABILITIES=compute,video,utility
  #     - NVIDIA_VISIBLE_DEVICES=all
  #     - CUDA_DRIVER_CAPABILITIES=compute,video,utility
  #   volumes:
  #     - ${VOL_CONFIG}/plex:/config
  #     - media:/media
  #   ports:
  #     - 32469:32469
  #     - 32400:32400
  #     - 32401:32401
  #     - 3005:3005
  #     - 8324:8324
  #     - 1900:1900/udp
  #     - 32410:32410/udp
  #     - 32412:32412/udp
  #     - 32413:32413/udp
  #     - 32414:32414/udp
  #   restart: ${RESTART_POLICY}
  #   networks:
  #     - intranet
  #   labels:
  #     - swag=enable
  #     - swag_port=3306
  #   deploy:
  #     placement:
  #       constraints: [ node.hostname == docker-manager-1 ]

  deluge:
    image: lscr.io/linuxserver/deluge:latest
    container_name: deluge
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${VOL_CONFIG}/deluge:/config
      - downloads:/downloads
    ports:
      # - 8112:8112
      - 6881:6881
      - 6881:6881/udp
    restart: ${RESTART_POLICY}
    networks:
      - intranet
    labels:
      - swag=enable
      - swag_port=8112
      - swag_proto=http
    # qbittorrent:
    #   image: ghcr.io/linuxserver/qbittorrent
    #   container_name: qbittorrent
    #   environment:
    #     - PUID=${PUID}
    #     - PGID=${PGID}
    #     - TZ=${TZ}
    #     - WEBUI_PORT=8080
    #   volumes:
    #     - ${VOL_CONFIG}/qbittorrent:/config
    #     - downloads:/downloads
    # ports:
    #   - ${QBITTORRENT_PORT_6881}:6881
    #   - ${QBITTORRENT_PORT_6881}:6881/udp
    #   - ${QBITTORRENT_PORT_8080}:${QBITTORRENT_PORT_8080}
    # restart: ${RESTART_POLICY}
    # networks:
    #   - intranet

  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${VOL_CONFIG}/radarr:/config
      - media:/media
      - downloads:/downloads
    restart: ${RESTART_POLICY}
    networks:
      - intranet
    labels:
      - swag=enable
      - swag_port=7878

  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${VOL_CONFIG}/sonarr:/config
      - media:/media
      - downloads:/downloads
    restart: ${RESTART_POLICY}
    networks:
      - intranet
    labels:
      - swag=enable
      - swag_port=8989

  # TODO
  # bazarr:
  #   image: ghcr.io/linuxserver/bazarr
  #   container_name: bazarr
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #   volumes:
  #     - ${VOL_CONFIG}/bazarr:/config
  #     - media:/media
  #   # ports:
  #   #   - ${BAZARR_PORT_6767}:6767
  #   restart: ${RESTART_POLICY}
  #   networks:
  #     - intranet

  lidarr:
    image: ghcr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${VOL_CONFIG}/lidarr:/config
      - media:/media
      - downloads:/downloads
    # ports:
    #   - ${LIDARR_PORT_8686}:8686
    restart: ${RESTART_POLICY}
    networks:
      - intranet
    labels:
      - swag=enable
      - swag_port=8686

  readarr-ebooks:
    image: ghcr.io/linuxserver/readarr:develop
    container_name: readarr-ebooks
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${VOL_CONFIG}/readarr-ebooks:/config
      - downloads:/downloads
      - media:/media
    restart: ${RESTART_POLICY}
    # ports:
    #   - 8787:8787
    networks:
      - intranet
    labels:
      - swag=enable
      - swag_address=readarr-ebooks
      - swag_port=8787
      - swag_url=ebooks.*

  readarr-audiobooks:
    image: ghcr.io/linuxserver/readarr:develop
    container_name: readarr-audiobooks
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${VOL_CONFIG}/readarr-audiobooks:/config
      - downloads:/downloads
      - media:/media
    restart: ${RESTART_POLICY}
    networks:
      - intranet
    # ports:
    #   - 8788:8787
    labels:
      - swag=enable
      - swag_address=readarr-audiobooks
      - swag_port=8787
      - swag_url=audiobooks.*

  overseerr:
    image: ghcr.io/linuxserver/overseerr
    container_name: overseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${VOL_CONFIG}/overseerr:/config
      - media:/media
      - downloads:/downloads
    restart: ${RESTART_POLICY}
    networks:
      - intranet
    labels:
      - swag=enable
      - swag_port=5055

  prowlarr:
    image: ghcr.io/linuxserver/prowlarr:develop
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${VOL_CONFIG}/prowlarr:/config
    restart: ${RESTART_POLICY}
    networks:
      - intranet
    labels:
      - swag=enable
      - swag_port=9696
  # nzbget:
  #   image: lscr.io/linuxserver/nzbget
  #   container_name: nzbget
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #     - NZBGET_USER=${NZBGET_USER} 
  #     - NZBGET_PASS=${NZBGET_PASS} 
  #   volumes:
  #     - ${VOL_CONFIG}/nzbget/config:/config
  #     - ${VOL_DOWNLOADS}:/downloads
  #   ports:
  #     - ${NZBGET_PORT_6789}:6789
  #   restart:  ${RESTART_POLICY}


volumes:
  media:
    driver_opts:
      type: cifs
      o: "username=${CIFS_USERNAME},password=${CIFS_PASSWORD},addr=${CIFS_ADDRESS},file_mode=0777,dir_mode=0777,uid=${PUID},gid=${PGID},mfsymlinks,hard,nobrl"
      device: "//${CIFS_ADDRESS}/media"
  downloads:
    driver_opts:
      type: cifs
      o: "username=${CIFS_USERNAME},password=${CIFS_PASSWORD},addr=${CIFS_ADDRESS},file_mode=0777,dir_mode=0777,uid=${PUID},gid=${PGID},mfsymlinks,hard,nobrl"
      device: "//${CIFS_ADDRESS}/downloads"

networks:
  intranet:
    external: true
